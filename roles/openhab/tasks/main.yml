- name: "Create new group for OpenHAB"
  group:
    name: "openhab"
    system: "yes"
    gid: 9001
  become: yes
  tags: [accounts]

- name: Include vaulted variables
  include_vars: vault.yml
  tags: [accounts, samba-share]

- name: "Create new account for OpenHAB"
  user:
    name: "openhab"
    group: "openhab"
    create_home: "no"
    shell: "/usr/sbin/nologin"
    password: "{{ vault_openhab_account_password }}"
    system: "yes"
    uid: 9001
  become: yes
  tags: [accounts]

- name: Make sure the management user is member of the OpenHAB group
  user:
    name: "{{ management_user }}"
    append: yes
    groups: openhab
  become: yes
  tags: [accounts]

- name: Install Samba
  apt:
    update_cache: yes
    name: "{{ item }}"
    state: present
  become: yes
  loop:
  - samba
  - samba-common-bin
  tags: [samba-share]

- name: Add share to samba config
  blockinfile:
    path: /etc/samba/smb.conf
    insertafter: EOF
    marker: "## {mark} ANSIBLE MANAGED BLOCK - OPENHAB SHARE ##"
    state: present
    block: |
      [openHAB2]
        comment=openHAB2 data
        path=/dockermnt/openhab
        browseable=Yes
        writeable=Yes
        only guest=no
        public=no
        create mask=0777
        directory mask=0777
  become: yes
  notify: Restart samba
  tags: [samba-share]

- name: Get samba users
  command: pdbedit -L
  become: yes
  changed_when: false
  register: samba_users
  tags: [samba-share]

- name: Create samba user for OpenHab
  shell: "(echo {{ samba.share_password }}; echo {{ samba.share_password }}) | smbpasswd -a -s {{ samba.share_username }}"
  become: yes
  when: "not samba_users.stdout is match('openhab:\\d+:')"
  notify: Restart samba
  tags: [samba-share]

- name: Check if there is already a git repository present
  stat:
    path: /dockermnt/openhab/.git/
  register: git_repo
  tags: [git-repo]

- name: Clone the git repository for OpenHAB to a temporary location # noqa 401 The latest version is the right version
  git:
    dest: /tmp/openhab/
    repo: 'git@ssh.dev.azure.com:v3/humanprinter/Home%20Automation/openhab'
    clone: yes
    update: no
    remote: origin
  when: not git_repo.stat.exists
  tags: [git-repo]

- name: Change the ownership of the cloned files
  file:
    path: "/tmp/openhab/{{ item }}/"
    recurse: yes
    owner: 'openhab'
    group: 'openhab'
  become: yes
  loop:
  - addons
  - conf
  - userdata
  when: not git_repo.stat.exists
  tags: [git-repo]

- include_role:
    name: dockermounts
    tasks_from: main
  vars:
    mounts:
    - { source: openhab/addons,     owner: 'openhab', group: 'openhab', mode: '775', type: 'directory' }
    - { source: openhab/conf,       owner: 'openhab', group: 'openhab', mode: '775', type: 'directory' }
    - { source: openhab/lib/jsr223, owner: 'openhab', group: 'openhab', mode: '775', type: 'directory' }
    - { source: openhab/userdata,   owner: 'openhab', group: 'openhab', mode: '775', type: 'directory' }
  tags: [docker-mounts]

- include_role:
    name: dockercontainer
    tasks_from: main
  vars:
    container_basename: "openhab"
    container_image: "openhab/openhab"
    container_tag: "{{ openhab.version }}"
    devices: "/dev/ttyUSB0"
    network_mode: host
    environment_variables:
      OPENHAB_BACKUPS: "/backup"
      EXTRA_JAVA_OPTS: "-Xbootclasspath/a:/openhab/lib/jsr223/jython/jython.jar -Dpython.home=/openhab/lib/jsr223/jython -Dpython.path=/openhab/lib/jsr223/jython/Lib:/openhab/conf/automation/lib/python"
    mounts:
    - { source: /etc/localtime,                 target: /etc/localtime,       read_only: "yes", type: bind }
    - { source: /etc/timezone,                  target: /etc/timezone,        read_only: "yes", type: bind }
    - { source: /dockermnt/openhab/addons/,     target: /openhab/addons,      read_only: "no",  type: bind }
    - { source: /dockermnt/openhab/conf/,       target: /openhab/conf/,       read_only: "no",  type: bind }
    - { source: /dockermnt/openhab/lib/jsr223/, target: /openhab/lib/jsr223/, read_only: "no",  type: bind }
    - { source: /dockermnt/openhab/userdata/,   target: /openhab/userdata,    read_only: "no",  type: bind }
    - { source: /mnt/usbdrive/openhab_backup/,  target: /backup/,             read_only: "no",  type: bind }
  tags: [docker-container]

- name: Wait for OpenHab to become fully initialized. This can take several minutes.
  wait_for:
    host: 127.0.0.1
    connect_timeout: 5
    delay: 0
    state: started
    sleep: 5
    timeout: 900
    port: 8080
  tags: [docker-container]

- name: Move the git repository over the files created by OpenHAB
  command:
    cmd: 'rsync -qrpEogtW /tmp/openhab/ /dockermnt/openhab/'
  become: yes
  when: not git_repo.stat.exists
  tags: [git-repo]

- name: Remove temporary git repository
  file:
    path: /tmp/openhab/
    state: absent
  become: yes
  when: not git_repo.stat.exists
  tags: [git-repo]

- name: Create a cron job to create periodic back-ups
  cron:
    name: "Backup Openhab"
    job: "docker exec openhab_{{ openhab.version }} /openhab/runtime/bin/backup"
    state: present
    user: "root"
    hour: "2"
    minute: "0"
  become: yes
  tags: [cron, backup]

- name: Create a cron job to remove old back-ups
  cron:
    name: "Remove old Openhab backups"
    job: "find /mnt/usbdrive/openhab_backup -name '*.zip' -type f -mtime +14 -delete"
    state: present
    user: "root"
    hour: "2"
    minute: "15"
  become: yes
  tags: [cron, backup]
