- name: Install pip3
  apt:
    update_cache: yes
    name: "python3-pip"
    state: present
  become: yes
  tags: [docker-container, dependencies]

- name: Install Docker SDK for Python
  pip:
    name: docker
    state: latest
  tags: [docker-container, dependencies]

- name: Ensure the dockermnt directory exists
  file:
    path: /dockermnt
    state: directory
    owner: "{{ management_user }}"
    group: docker
    mode: "775"
  become: yes
  tags: [docker-container, docker-mounts]

- name: Create mount directories
  file:
    path: "{{ item.src }}"
    state: directory
    owner: "{{ management_user }}"
    group: docker
    mode: "775"
  loop: "{{ mounts }}"
  when: item.type | default('directory') == 'directory'
  tags: [docker-container, docker-mounts]

- name: Create files from templates
  template:
    dest: "{{ item.dest }}"
    src: "{{ item.src }}"
    owner: "{{ management_user }}"
    group: docker
  loop: "{{ templates }}"
  when: "templates is defined and (condition | default(True))"
  tags: [docker-container, docker-mounts]

- name: Create and start Docker container
  docker_container:
    name: "{{ container_name }}"
    image: "{{ container_image }}"
    cleanup: "{{ cleanup | default('no') }}"
    detach: "{{ detach | default('yes') }}"
    command: "{{ command | default('') }}"
    network_mode: "{{ network_mode | default('bridge') }}"
    published_ports: "{{ exposed_ports }}"
    state: started
    restart_policy: "{{ restart_policy | default ('always') }}"
    mounts:
      - { type: bind, read_only: "{{ item.read_only | default('yes') }}", source: "{{ item.src }}", target: "{{ item.dest }}" }
  loop: "{{ mounts }}"
  when: "condition | default(True)"
  tags: [docker-container, deploy]